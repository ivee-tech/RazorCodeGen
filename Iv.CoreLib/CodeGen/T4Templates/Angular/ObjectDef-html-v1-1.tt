<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".html" fileName="$ObjDef$.html" #>
<#@ include file="../Assemblies.tt" #>
<#@ include file="../Common.tt" #>
<#
//Parameters
string objDefName;
#>
<#
try
{
	objDefName = Host.ResolveParameterValue(null, null, "objDefName");
}
catch
{
	objDefName = "Todo";
}
#>
<# CodeGen(objDefName); #>
 
<#+  
  // Insert any template procedures here
 	public void CodeGen(string objDefName)
	{
		ObjectDef o = ObjectDefLoader.Load(ConnectionString, objDefName);
		if(o != null) 
		{
			var props = o.Properties.OrderBy(p => p.PropertyOrder).ToList();
			var keyProp = props.Where(p => p.IsKey).First();
			var userKeyProp = props.Where(p => !p.IsUserKey).FirstOrDefault();
			var displayProps = props.Where(p => p.EditDisplay);
			string keyName = keyProp.Name.ToCamelCase();
#>
<section *ngIf="<#= o.Name.ToCamelCase() #>">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3><#= o.DisplayName #> {{<#= o.Name.ToCamelCase() #>?.<#= userKeyProp.Name.ToCamelCase() #>}}</h3>
        </div>
        <!-- /.panel-heading -->
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    <form (ngSubmit)="onSave()" [formGroup]="form">
                        <div *ngIf="saveReturned" class="alert alert-info alert-dismissible" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close" (click)="dismissAlert()"><span aria-hidden="true">&times;</span></button>
                            <strong>{{saveResult?.Message}}</strong>
                        </div>

<#+
			foreach(var p in displayProps)
			{
				GenerateProperty(p);
			}
#>
                        <hr />
                        <div>
                            <button type="submit" [disabled]="!form.valid" class="btn btn-primary">Save</button>
                        </div>
                    </form>
                </div>
                <!-- /.panel-body -->
            </div>
            <!-- /.panel -->
        </div>
    </div>
</section>
<#+
		}
	}
	
	private void GenerateProperty(ObjectDefProperty p)
	{
#>
                    <div class="form-group">
                        <label><#= p.DisplayName #></label>
<#+
		switch(p.TypeName)
		{
			case ObjectDefPropertyTypes.String:
				if(p.Length <= 100)
				{
					GenerateString(p);
				}
				else
				{
					GenerateLargeString(p);
				}
				break;
			case ObjectDefPropertyTypes.Byte:
			case ObjectDefPropertyTypes.Int16:
			case ObjectDefPropertyTypes.Int32:
			case ObjectDefPropertyTypes.Int64:
			case ObjectDefPropertyTypes.Decimal:
			case ObjectDefPropertyTypes.Single:
			case ObjectDefPropertyTypes.Double:
				GenerateNumber(p);
				break;
			case ObjectDefPropertyTypes.Boolean:
				GenerateCheckbox(p);
				break;
			case ObjectDefPropertyTypes.DateTime:
				GenerateDate(p);
				break;
			case ObjectDefPropertyTypes.Tel:
				GenerateTel(p);
				break;
			case ObjectDefPropertyTypes.Email:
				GenerateEmail(p);
				break;
			case ObjectDefPropertyTypes.Password:
				GeneratePassword(p);
				break;
			default:
				GenerateString(p);
				break;
		}
#>                        
                    </div>
<#+
	}

	private void GenerateNumber(ObjectDefProperty p)
	{
#>
                <input type="number" class="form-control iv-input-number" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'">
<#+
	}

	private void GenerateString(ObjectDefProperty p)
	{
#>
                <input type="text" class="form-control iv-input-text" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'">
<#+
	}

	private void GeneratePassword(ObjectDefProperty p)
	{
#>
                <input type="password" class="form-control iv-input-password" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'">
<#+
	}

	private void GenerateDate(ObjectDefProperty p)
	{
#>
                <input class="form-control iv-input-datetime" type="date" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'" value='{{ <#= p.Name #> | date:"yyyy-MM-dd" }}'>
<#+
	}

	private void GenerateDateTime(ObjectDefProperty p)
	{
#>
                <input class="form-control iv-input-datetime" type="datetime" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'" value='{{ <#= p.Name #> | date:"yyyy-MM-dd" }}'>
<#+
	}

	private void GenerateLargeString(ObjectDefProperty p)
	{
#>
                <textarea type="text" class="form-control iv-input-large-text" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'"></textarea>
<#+
	}

	private void GenerateCheckbox(ObjectDefProperty p)
	{
#>
                <input class="form-control iv-input-check" type="checkbox" [attr.name]="'<#= p.Name #>'" [formControlName]="'<#= p.Name #>'" [attr.checked]="<#= p.Name #>">
<#+
	}

	private void GenerateTel(ObjectDefProperty p)
	{
#>
                <input type="tel" class="form-control iv-input-tel" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'">
<#+
	}

	private void GenerateEmail(ObjectDefProperty p)
	{
#>
                <input type="email" class="form-control iv-input-email" [attr.name]="'<#= p.Name #>'" placeholder="Enter {{p.DisplayName}}" [formControlName]="'<#= p.Name #>'">
<#+
	}
#>
