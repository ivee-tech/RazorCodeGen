<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".ts" fileName="$ObjDef$.component.ts" #>
<#@ include file="../Assemblies.tt" #>
<#@ include file="../Common.tt" #>
<#@ include file="../TypeScript/Common.tt" #>
<#
//Parameters
string objDefName;
#>
<#
try
{
	objDefName = Host.ResolveParameterValue(null, null, "objDefName");
}
catch
{
	objDefName = "Todo";
}
#>
import { Component, Inject, Input } from '@angular/core';
import { Observable } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
import { FormGroup, FormControl, Validators, FormBuilder, ValidatorFn, Validator } from '@angular/forms';
import { IDataService, <#= objDefName #> } from '../common';

<# CodeGen(objDefName); #>
 
<#+  
  // Insert any template procedures here
 	public void CodeGen(string objDefName)
	{
		ObjectDef o = ObjectDefLoader.Load(ConnectionString, objDefName);
		if(o != null) 
		{
			string name = o.Name.ToCamelCase();
			var keyProp = o.GetKey();
			string keyName = keyProp.Name.ToCamelCase();
#>
@Component({
  selector: '<#= o.Name.SplitLowerCase("-") #>',
  template: require('./<#= o.Name #>.html')
})
export class <#= o.Name #>Component {
    @Input() <#= keyName #>Sub: Observable<any>;
    private <#= name #>: <#= o.Name #>;

    private key: any;

    private form: FormGroup;
    private controls: any = {};

    private saveReturned: boolean = false;
    private saveResult: any;

    constructor( @Inject('IDataService') private dataSvc: IDataService,
        @Inject(ActivatedRoute) private route: ActivatedRoute
    ) {
		this.dataSvc.<#= name #>.subscribe(result => {
            this.<#= name #> = result;
            console.log(this.<#= name #>);
			this.createForm();
        });
		this.dataSvc.save<#= o.Name #>Result.subscribe(result => {
            this.saveReturned = false;
            if (result) {
                this.saveResult = JSON.parse(result._body);
                this.saveReturned = true;
                console.log(result);
            }
        });
        this.<#= keyName #> = route.params.map(r => r['<#= keyName #>']);
        this.<#= keyName #>.subscribe((<#= keyName #>) => {
			if (<#= keyName #> === '-1') {
				this.loadNew<#= o.Name #>();
			}
			else {
				this.load<#= o.Name #>(<#= keyName #>);
			}
		});
    }

    ngOnInit() {
    }
			
<#+
			GenerateLoadNew(o);
			GenerateLoad(o);
			GenerateCreateForm(o);
			GenerateSave(o);
			GenerateMisc(o);
#>
}
<#+
		}
	}
	
	private void GenerateLoadNew(ObjectDef o)
	{
		string name = o.Name.ToLower();
#>
    protected loadNew<#= o.Name #>() {
        this.dataSvc.loadNew<#= o.Name #>();
    }
<#+
	
	}
	
	private void GenerateLoad(ObjectDef o)
	{
		string name = o.Name.ToLower();
		var keyProp = o.GetKey();
		string keyName = keyProp.Name.ToCamelCase();
#>
    protected load<#= o.Name #>(<#= keyName #>: <#= MapType(keyProp.TypeName) #>) {
        this.dataSvc.load<#= o.Name #>(<#= keyName #>);
    }
<#+
	
	}
	
	private void GenerateSave(ObjectDef o)
	{
		string name = o.Name.ToCamelCase();
#>
    private onSave() {
        this.dataSvc.save<#= o.Name #>(this.<#= name #>);
    }

    private dismissAlert() {
        this.saveReturned = false;
    }

<#+
	}

	private void GenerateMisc(ObjectDef o)
	{
		string name = o.Name.ToCamelCase();
#>
<#+
	}
	
	private void GenerateCreateForm(ObjectDef o)
	{
		string name = o.Name.ToCamelCase();
#>
    private createForm() {
        this.controls = {};
<#+
		foreach(var mp in o.Properties.Where(p => p.EditDisplay))
		{
#>
        this.controls.<#= mp.Name #> = new FormControl(<#= name #>.<#= mp.Name #>, Validators.required);
<#+
		}
#>
        this.form = this.fb.group(this.controls);
        this.form.valueChanges
            .map((value) => {
                return value;
            })
            .filter((value) => this.form.valid)
            .subscribe((value) => {
                for (let kv in value) {
                    this.<#= name #>[kv] = value[kv];
                }
            });
    }

<#+
	}

#>
