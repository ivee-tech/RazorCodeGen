<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".ts" fileName="$ObjDef$.model.ts" #>
<#@ include file="../Assemblies.tt" #>
<#@ include file="../Common.tt" #>
<#@ include file="Common.tt" #>
<#
//Parameters
string objDefName;
#>
<#
try
{
	objDefName = Host.ResolveParameterValue(null, null, "objDefName");
}
catch
{
	objDefName = "Todo";
}
#>
<# CodeGen(objDefName); #>
<#+  
  // Insert any template procedures here
 	public void CodeGen(string objDefName)
	{
		ObjectDef o = ObjectDefLoader.Load(ConnectionString, objDefName);
		if(o != null) 
		{
#>
import { ModelBase } from './model-base.model';
export class <#= o.Name #> extends ModelBase {
<#+
			GenerateProperties(o);
#>
	constructor () {
		super();
	}	
}
<#+
		}
	}
	
	private void GenerateProperties(ObjectDef o)
	{
		foreach(ObjectDefProperty p in o.Properties.OrderBy(p => p.PropertyOrder))
		{
			string propName = p.Name;
			string propDisplayName = p.DisplayName;
			string typeName = MapType(p.TypeName);
			bool isKey = p.IsKey;
#>
	public <#= propName.ToCamelCase() #>: <#= typeName #>;

<#+
		}
	}
#>
