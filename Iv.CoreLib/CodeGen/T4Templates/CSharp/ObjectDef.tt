<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" fileName="$ObjDef$.cs" #>
<#@ include file="../Assemblies.tt" #>
<#@ include file="../Common.tt" #>
<#
//Parameters
string objDefName;
string mns;
#>
<#
try
{
	objDefName = Host.ResolveParameterValue(null, null, "objDefName");
}
catch
{
	objDefName = "Todo";
}
try
{
	mns = Host.ResolveParameterValue(null, null, "mns");
	mns = string.IsNullOrEmpty(mns) ? "Common" : mns;
}
catch
{
	mns = "Common";
}
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Runtime.Serialization;

using Iv.Common;

namespace <#= mns #>
{
<# CodeGen(objDefName); #>
}

 
<#+  
  // Insert any template procedures here
 	public void CodeGen(string objDefName)
	{
		ObjectDef o = ObjectDefLoader.Load(ConnectionString, objDefName);
		if(o != null) 
		{
#>
	public partial class <#= o.Name #> : ObjectDefBase
	{

		public <#= o.Name #>()
		{
		}
			
<#+
			GenerateProperties(o);
			GenerateSetDeleted(o);
#>
	}
<#+
		}
	}
	
	private void GenerateProperties(ObjectDef o)
	{
		foreach(ObjectDefProperty p in o.Properties.OrderBy(p => p.PropertyOrder))
		{
			string propName = p.Name;
			string propDisplayName = p.DisplayName;
			string typeName = p.NetTypeName;
			bool isKey = p.IsKey;
#>
		public <#= typeName #> <#= propName #> { get; set; }

<#+
		}
	}
	
	private void GenerateSetDeleted(ObjectDef o)
	{
#>
		public override void SetDeleted()
		{
			base.SetDeleted();
		}
<#+
	}
#>
