using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

using Iv.Common;
using Iv.Reflection;
using System.ComponentModel;
using Iv.Text;

namespace Iv.Data
{
    public class ObjectDefSqlCommandBuilder
    {

        public const string TopNParamName = "@TopN";
        public const string PageNumberParamName = "@PageNumber";
        public const string PageSizeParamName = "@PageSize";
        public const string TotalCountParamName = "@TotalCount";
        public const int TopNRecordCount = 1000;
        public const int DefaultPageSize = 50;

        public static void ConfigureCreateCommand(ObjectDef m, string schemaName, SqlCommand cmd, IEnumerable<object> values = null)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            StringBuilder sbParams = new StringBuilder();
            sb.AppendLine(string.Format("INSERT INTO [{0}].[{1}](", schemaName, entityName));
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Create)).OrderBy(p => p.PropertyOrder); //.Where(p => p.AllowCreate && !p.AutoGenerated).OrderBy(p => p.PropertyOrder);
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName; // (from mep in m.ModelEntityMappings where mep.ModelPropertyName.Equals(mp.Name) select mep.EntityPropertyName).SingleOrDefault();
                if (i == 0)
                {
                    sb.AppendLine(string.Format("\t[{0}]", entityPropName));
                    sbParams.AppendLine(string.Format("\t@{0}", entityPropName));
                }
                else
                {
                    sb.AppendLine(string.Format("\t, [{0}]", entityPropName));
                    sbParams.AppendLine(string.Format("\t, @{0}", entityPropName));
                }
                if (values != null)
                {
                    cmd.Parameters.AddWithValue("@" + entityPropName, values.ElementAt(i) != null ? values.ElementAt(i) : DBNull.Value);
                }
            }
            sb.AppendLine(")");
            sb.AppendLine("VALUES(");
            sb.AppendLine(sbParams.ToString());
            sb.AppendLine(")");
            cmd.CommandText = sb.ToString();
        }

        public static void ConfigureGetAllCommand(ObjectDef m, string schemaName, SqlCommand cmd, int maxRecordCount = -1)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            if (maxRecordCount > 0)
            {
                sb.AppendLine($"SELECT TOP({TopNParamName})");
            }
            else
            {
                sb.AppendLine("SELECT ");
            }
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Read)).OrderBy(p => p.PropertyOrder); //.Where(p => p.AllowRead).OrderBy(p => p.PropertyOrder);
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName; // (from mep in m.ModelEntityMappings where mep.ModelPropertyName.Equals(mp.Name) select mep.EntityPropertyName).SingleOrDefault();
                if (i == 0)
                {
                    sb.AppendLine(string.Format("\t[{0}]", entityPropName));
                }
                else
                {
                    sb.AppendLine(string.Format("\t, [{0}]", entityPropName));
                }
            }
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            var orderByCols = GetOrderByCols(q);
            if (!string.IsNullOrEmpty(orderByCols))
            {
                sb.AppendLine(string.Format("ORDER BY {0}", orderByCols));
            }
            cmd.CommandText = sb.ToString();
            if (maxRecordCount > 0)
            {
                cmd.Parameters.AddWithValue(TopNParamName, maxRecordCount);
            }
        }

        public static void ConfigureUpdateCommand(ObjectDef m, string schemaName, SqlCommand cmd, IEnumerable<object> values = null)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            StringBuilder sbFilters = new StringBuilder();
            sb.AppendLine(string.Format("UPDATE [{0}].[{1}] SET", schemaName, entityName));
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Update)).OrderBy(p => p.PropertyOrder); //.Where(p => (p.AllowUpdate && !p.AutoGenerated) || p.IsKey).OrderBy(p => p.PropertyOrder);
            bool bKeyAdded = false;
            bool setColumnAdded = false;
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName; // (from mep in m.ModelEntityMappings where mep.ModelPropertyName.Equals(mp.Name) select mep.EntityPropertyName).SingleOrDefault();
                if (mp.IsKey)
                {
                    if (!bKeyAdded)
                    {
                        sbFilters.Append(string.Format("WHERE [{0}] = @{0}", entityPropName));
                        bKeyAdded = true;
                    }
                    else
                    {
                        sbFilters.Append(string.Format("AND [{0}] = @{0}", entityPropName));
                    }
                }
                else
                {
                    if (!setColumnAdded)
                    {
                        sb.AppendLine(string.Format("\t[{0}] = @{0}", entityPropName));
                        setColumnAdded = true;
                    }
                    else
                    {
                        sb.AppendLine(string.Format("\t, [{0}] = @{0}", entityPropName));
                    }
                }
                if (values != null)
                {
                    cmd.Parameters.AddWithValue("@" + entityPropName, values.ElementAt(i) != null ? values.ElementAt(i) : DBNull.Value);
                }
            }
            sb.AppendLine(sbFilters.ToString());
            cmd.CommandText = sb.ToString();
        }

        public static void ConfigureFilterCommand(ObjectDef m, string schemaName, SqlCommand cmd, Condition cond, string orderByExpression, int maxRecordCount = -1)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            if (maxRecordCount > 0)
            {
                sb.AppendLine($"SELECT TOP({TopNParamName})");
            }
            else
            {
                sb.AppendLine("SELECT ");
            }
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Read)).OrderBy(p => p.PropertyOrder);; //.Where(p => p.AllowRead).OrderBy(p => p.PropertyOrder);
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName; // (from mep in m.ModelEntityMappings where mep.ModelPropertyName.Equals(mp.Name) select mep.EntityPropertyName).SingleOrDefault();
                if (i == 0)
                {
                    sb.AppendLine(string.Format("\t[{0}]", entityPropName));
                }
                else
                {
                    sb.AppendLine(string.Format("\t, [{0}]", entityPropName));
                }
            }
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            if (cond != null)
            {
                string condString = cond.ToSqlString(true);
                if (!string.IsNullOrEmpty(condString))
                {
                    sb.AppendLine(string.Format("WHERE {0}", condString));
                    cmd.Parameters.AddRange(cond.GetSqlParameters().ToArray());
                }
            }
            var orderByCols = GetOrderByCols(q);
            if (!string.IsNullOrEmpty(orderByExpression))
            {
                sb.AppendLine(string.Format("ORDER BY {0}", orderByExpression));
            }
            else
            {
                if (!string.IsNullOrEmpty(orderByCols))
                {
                    sb.AppendLine(string.Format("ORDER BY {0}", orderByCols));
                }
            }
            cmd.CommandText = sb.ToString();
            if (maxRecordCount > 0)
            {
                cmd.Parameters.AddWithValue(TopNParamName, maxRecordCount);
            }
        }

        public static void ConfigureFilterCommand(ObjectDef m, string schemaName, SqlCommand cmd, Condition cond, string orderByExpression, int pageNumber, int pageSize)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            StringBuilder sbColumns = new StringBuilder();
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Read)).OrderBy(p => p.PropertyOrder); //.Where(p => p.AllowRead).OrderBy(p => p.PropertyOrder);
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName;
                if (i == 0)
                {
                    sbColumns.AppendLine(string.Format("\t[{0}]", entityPropName));
                }
                else
                {
                    sbColumns.AppendLine(string.Format("\t, [{0}]", entityPropName));
                }
            }
            string columns = sbColumns.ToString();
            string filters = string.Empty;
            if (cond != null)
            {
                string condString = cond.ToSqlString(true);
                if (!string.IsNullOrEmpty(condString))
                {
                    filters = string.Format("WHERE {0}", condString);
                    cmd.Parameters.AddRange(cond.GetSqlParameters().ToArray());
                }
            }
            sb.AppendLine($"SELECT {TotalCountParamName} = COUNT(*)");
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            sb.AppendLine(filters);
            sb.AppendLine(string.Format(";WITH {0}CTE AS", entityName));
            sb.AppendLine("(");
            sb.AppendLine("\tSELECT");
            sb.AppendLine(columns);
            var orderByCols = GetOrderByCols(q);
            if (!string.IsNullOrEmpty(orderByExpression))
            {
                sb.AppendLine(string.Format("\t, ROW_NUMBER() OVER (ORDER BY {0}) AS RowNumber", orderByExpression));
            }
            else
            {
                if (!string.IsNullOrEmpty(orderByCols))
                {
                    sb.AppendLine(string.Format("\t, ROW_NUMBER() OVER (ORDER BY {0}) AS RowNumber", orderByCols));
                }
                else
                {
                    var key = m.GetKey();
                    sb.AppendLine(string.Format("\t, ROW_NUMBER() OVER (ORDER BY {0}) AS RowNumber", key.Name));
                }
            }
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            sb.AppendLine(filters);
            sb.AppendLine(")");
            sb.AppendLine($"SELECT TOP({PageSizeParamName})");
            sb.AppendLine(columns);
            sb.AppendLine(string.Format("FROM {0}CTE", entityName));
            sb.AppendLine($"WHERE RowNumber > ({PageNumberParamName} - 1) * {PageSizeParamName}");
            cmd.Parameters.AddWithValue(PageNumberParamName, pageNumber);
            cmd.Parameters.AddWithValue(PageSizeParamName, pageSize);
            SqlParameter param = new SqlParameter(TotalCountParamName, SqlDbType.Int);
            param.Direction = ParameterDirection.InputOutput;
            param.Value = 0;
            cmd.Parameters.Add(param);
            cmd.CommandText = sb.ToString();
        }

        public static void ConfigureCountCommand(ObjectDef m, string schemaName, SqlCommand cmd, Condition cond)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            var strKeys = (from mp in m.Properties 
                           where mp.IsKey
                           select string.Format("[{0}]", mp.ColumnName)).FirstOrDefault(); // Aggregate((r, i) => r + ", " + i);
            sb.AppendLine(string.Format("SELECT COUNT({0})", strKeys));
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            if (cond != null)
            {
                string condString = cond.ToSqlString(true);
                if(!string.IsNullOrEmpty(condString)) 
                {
                    sb.AppendLine(string.Format("WHERE {0}", condString));
                    cmd.Parameters.AddRange(cond.GetSqlParameters().ToArray());
                }
            }
            cmd.CommandText = sb.ToString();
        }

        public static void ConfigureFindCommand(ObjectDef m, string schemaName, SqlCommand cmd, params object[] keys)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT ");
            var q = m.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Update)).OrderBy(p => p.PropertyOrder); //.Where(p => p.AllowRead);
            for (int i = 0; i < q.Count(); i++)
            {
                ObjectDefProperty mp = q.ElementAt(i);
                var entityPropName = mp.ColumnName; // (from mep in m.ModelEntityMappings where mep.ModelPropertyName.Equals(mp.Name) select mep.EntityPropertyName).SingleOrDefault();
                if (i == 0)
                {
                    sb.AppendLine(string.Format("\t[{0}]", entityPropName));
                }
                else
                {
                    sb.AppendLine(string.Format("\t, [{0}]", entityPropName));
                }
            }
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            var qKeys = (from mp in m.Properties
                         //join mep in m.ModelEntityMappings on mp.Name equals mep.ModelPropertyName
                         where mp.IsKey
                         select mp.ColumnName);
            for (int i = 0; i < qKeys.Count(); i++)
            {
                if (keys.Any() && keys[i] != null)
                {
                    sb.AppendLine(string.Format("WHERE [{0}] = @{0}", qKeys.ElementAt(i)));
                    cmd.Parameters.AddWithValue("@" + qKeys.ElementAt(i), keys[i]);
                }
            }
            cmd.CommandText = sb.ToString();
        }

        public static void ConfigureDeleteCommand(ObjectDef m, string schemaName, SqlCommand cmd, IEnumerable<object> values = null)
        {
            cmd.CommandType = CommandType.Text;
            string entityName = m.EntityName;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("DELETE ");
            sb.AppendLine(string.Format("FROM [{0}].[{1}]", schemaName, entityName));
            var qProps = (from mp in m.Properties
                         //join mep in m.ModelEntityMappings on mp.Name equals mep.ModelPropertyName
                         //where mp.IsKey.GetValueOrDefault()
                         orderby mp.PropertyOrder 
                         select new { Name = mp.ColumnName, IsKey = mp.IsKey });
            for (int i = 0; i < qProps.Count(); i++)
            {
                if (qProps.ElementAt(i).IsKey)
                {
                    sb.AppendLine(string.Format("WHERE [{0}] = @{0}", qProps.ElementAt(i).Name));
                    if (values != null)
                    {
                        cmd.Parameters.AddWithValue("@" + qProps.ElementAt(i).Name, values.ElementAt(i) != null ? values.ElementAt(i) : DBNull.Value);
                    }
                }
            }
            cmd.CommandText = sb.ToString();
        }

        public static void DeriveParameters<T>(SqlCommand cmd, T obj, DataOperation operation = DataOperation.None)
        {
            var props = from prop in typeof(T).GetInstanceBrowsableProperties()
                        where prop.PropertyType.IsSimpleType() && prop.CanWrite
                        select prop;
            foreach (var p in props)
            {
                if (!p.HasIgnoreColumn(operation))
                {
                    var value = p.GetValue(obj);
                    cmd.Parameters.AddWithValue("@" + p.Name, value ?? DBNull.Value);
                }
            }
        }

        public static void DeriveInstanceParameters(SqlCommand cmd, ObjectDef objDef, ObjectDefInstance instance, DataOperation operation = DataOperation.None)
        {
            var props = from prop in objDef.Properties
                        select prop;
            foreach (var p in props)
            {
                if (!p.HasIgnoreColumn(operation))
                {
                    if (instance.Properties.ContainsKey(p.Name))
                    {
                        var value = instance.Properties[p.Name];
                        cmd.Parameters.AddWithValue("@" + p.ColumnName, value ?? DBNull.Value);
                    }
                }
            }
        }

        public static void DeriveObjectDefParameters(SqlCommand cmd, ObjectDef obj)
        {
            DeriveParameters<ObjectDef>(cmd, obj);
        }

        public static void DeriveObjectDefPropertyParameters(SqlCommand cmd, ObjectDefProperty obj)
        {
            DeriveParameters<ObjectDefProperty>(cmd, obj);
        }

        public static void MapReader<T>(SqlDataReader rdr, T obj, DataOperation operation = DataOperation.None)
        {
            if (!rdr.IsClosed)
            {
                // TODO: cache the properties
                var props = from prop in typeof(T).GetInstanceBrowsableProperties()
                            where prop.PropertyType.IsSimpleType()
                            select prop;
                foreach (var p in props)
                {
                    object value = null;
                    if (rdr.ContainsColumn(p.Name) && !p.HasIgnoreColumn(operation))
                    {
                        rdr.TryGetValue(p.PropertyType.GetUnderlyingType().FullName, p.Name, ref value);
                        p.SetValue(obj, value);
                    }
                }
            }
        }

        public static void MapReaderObjectDef(SqlDataReader rdr, ObjectDef obj)
        {
            MapReader<ObjectDef>(rdr, obj, DataOperation.Read);
        }

        public static void MapReaderObjectDefProperty(SqlDataReader rdr, ObjectDefProperty obj)
        {
            MapReader<ObjectDefProperty>(rdr, obj, DataOperation.Read);
        }

        public static void MapReaderObjectDefDbObject(SqlDataReader rdr, ObjectDefDbObject obj)
        {
            MapReader<ObjectDefDbObject>(rdr, obj, DataOperation.Read);
        }

        public static void MapReaderObjectDefPropertyValidation(SqlDataReader rdr, ObjectDefPropertyValidation obj)
        {
            MapReader<ObjectDefPropertyValidation>(rdr, obj, DataOperation.Read);
        }

        public static void MapReaderObjectDefView(SqlDataReader rdr, ObjectDefView obj)
        {
            MapReader<ObjectDefView>(rdr, obj, DataOperation.Read);
        }

        public static string GetOrderByCols(ObjectDef objDef)
        {
            IEnumerable<ObjectDefProperty> properties = objDef.Properties.Where(p => !p.HasIgnoreColumn(DataOperation.Read));
            return GetOrderByCols(properties);
        }

        public static string GetWhereClause(ObjectDef objDef)
        {
            var filters = (from p in objDef.Properties where p.CanFilter select $"{p.ColumnName} {Condition.GetComparisonOperatorSql(p.FilterOperator)} @{p.ColumnName}");
            if (filters.Any())
            {
                return $"WHERE {filters.Aggregate((r, i) => r + " AND " + i)}";
            }
            return string.Empty;
        }

        public static void SetCommandFilterParameters(ObjectDef objDef, SqlCommand cmd, IDictionary<string, object> values)
        {
            var filters = (from p in objDef.Properties where p.CanFilter select p);
            if (filters.Any())
            {
                foreach(var filter in filters)
                {
                    cmd.Parameters.AddWithValue("@" + filter.ColumnName, values.ContainsKey(filter.ColumnName) ? values[filter.ColumnName] : DBNull.Value);
                }
            }
        }

        public static void SetCommandFilterParameters(Condition cond, SqlCommand cmd)
        {
            if(cond != null)
            {
                cmd.Parameters.AddWithValue("@" + cond.PropertyName, cond.Value1 == null ? DBNull.Value : cond.Value1);
                foreach(var childCond in cond.Conditions)
                {
                    cmd.Parameters.AddWithValue("@" + childCond.PropertyName, childCond.Value1 == null ? DBNull.Value : childCond.Value1);
                }
            }
        }

        public static void MapReaderObjectDefInstance(SqlDataReader rdr, ObjectDef obj, ObjectDefInstance instance, DataOperation operation = DataOperation.None)
        {
            if (!rdr.IsClosed)
            {
                // TODO: cache the properties
                var props = from prop in obj.Properties
                            select prop;
                foreach (var p in props)
                {
                    object value = null;
                    if (rdr.ContainsColumn(p.ColumnName) && !p.HasIgnoreColumn(operation))
                    {
                        rdr.TryGetValue(p.NetTypeName, p.Name, ref value);
                        if (instance.Properties.ContainsKey(p.Name))
                        {
                            instance.Properties[p.Name] = value;
                        }
                    }
                }
            }
        }

        private static string GetOrderByCols(IEnumerable<ObjectDefProperty> properties)
        {
            var orderByCols = (from prop in properties where prop.SortType != Common.SortType.None orderby prop.SortOrder select string.Format("{0} {1}", prop.ColumnName, prop.SortType == Common.SortType.Descending ? "DESC" : "ASC"));
            string result = "";
            if (orderByCols.Any())
            {
                result = orderByCols.Aggregate((r, i) => r + ", " + i);
            }
            return result;
        }
    }
}
